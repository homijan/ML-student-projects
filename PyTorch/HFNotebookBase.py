import pandas as pd
from torch.utils.data import DataLoader
#from pytorch_lightning.profiler import Profiler, AdvancedProfiler
import HeatFluxData as hfd
import HeatfluxModel as hfm

filename_data = f'{path}/scaled_QdataKn22width100microns.csv'
# Using heat flux data module
scaled_Qdata = pd.read_csv(filename_data, header=0, index_col=0)
test_set, train_set, validation_set, vis_set = hfd.heat_flux_datasets(scaled_Qdata, 0.3, 0.8)

### Create data loaders
train_loader = DataLoader(dataset = train_set, batch_size = 128)
validation_loader = DataLoader(dataset = validation_set, batch_size = 128)
test_loader = DataLoader(dataset = test_set, batch_size = 128)
# Special object for visualization
vis_loader = DataLoader(dataset = vis_set, batch_size = 128)

### Read data sacling (generated by the data manager)
data_scaling=pd.read_csv(f'{path}/data_scaling.csv', header=0, index_col=0)

### Create heat flux model
Nfeautures = train_set.size[0] # TODO: is this correct?
Nlayer1 = 20
Nlayer2 = 10
model = hfm.AlphacModel(Nfeatures, Nlayer1, Nlayer2, data_scaling)

### Let's train the beast!
trainer = pl.Trainer(max_epochs = 100)
trainer.fit(model, train_loader, validation_loader)

### Test the beast
trainer = Trainer()
# TODO: change this global variable
predictions_pred = []
predictions_actual = []
# Actual testing 
trainer.test(model, dataloaders=test_loader)
# TODO: decide how to plot the results (should not be all data including train_set)
# TODO: change this global variable
predictions_pred = []
predictions_actual = []
# Actual testing 
trainer.test(model, dataloaders=vis_loader)
